import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;


public class TimerGuiSingle extends SinglePlayerMode {

    private JFrame timerGuiFrame;
    private JPanel timerGuiSingleMainPanel;
    private JPanel GameGuiLeftPanel;
    private JButton button1;
    private JButton button4;
    private JButton button3;
    private JButton button2;
    private JLabel GameGuiLeftLabel;
    private JLabel scoreLabel;
    private JLabel gameGuiModeLabel;
    private JLabel categoryLabel;
    private JPanel ImagePanel;
    private JLabel imageLabel;
    private JPanel QuestionPanel;
    private JTextArea QuestionAnswersText;
    private JLabel timerLabel;
    private long startTime;
    private long currentTime;
    private long timeElapsed;
    private int timerCounter;
    private TimerCountdown timerCountdown;

    private int questionCounter;

    TimerGuiSingle() {                          //παρομοιος κατασκευαστης με τα αλλα δυο modes του μονου παιχνιδιου

        questionCounter = 1;
        timerGuiFrame = new JFrame("APORTHITO");
        scoreString = String.valueOf(score);

        $$$setupUI$$$();
        setLanguage();
        setButtonInputActionMaps();
        setButtonActionListeners();


        timerGuiFrame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        timerGuiFrame.setSize(1300, 600);
        timerGuiFrame.setLocationRelativeTo(null);

                                                                            //ενα επιπλεον label για τον χρονο που απομενει
        timerLabel.setFont(timerLabel.getFont().deriveFont(50f));
        setTextLabel(scoreString, getRandomQuestionAnswer(), getImageIfExists(), "@" + getQuestionCategory());


        timerGuiFrame.setContentPane(timerGuiSingleMainPanel);
        timerGuiFrame.setVisible(true);

        startTime = System.currentTimeMillis();  //αποθηκευουμε την ακριβη ωρα θεωρωντας τη ωρα εκκινησης του χρονομετρου αφου εχει ηδη εμφανιστει η ερωτηση
                                                //θα μας χρειαστει για την ευρεση του χρονου που περασε μεχρι να απαντησει ο χρηστης

        timerCountdown = new TimerCountdown();  //Ξεκιναμε ενα thread που εμφανιζει την αντιστροφη μετρηση του χρονου
        timerCountdown.start();




    }


    private void setLanguage() {  //καλειται στον κατασκευαστη για να σεταρει στη σωστη γλωσσα
        switch (Language.languageChoice) {
            case "greek": {
                GameGuiLeftLabel.setText("ΣΚΟΡ :");
                gameGuiModeLabel.setText(" ΓΥΡΟΣ ΧΡΟΝΟΜΕΤΡΟ");
                break;
            }
            case "english": {
                GameGuiLeftLabel.setText("SCORE :");
                gameGuiModeLabel.setText(" TIMER MODE");
                break;
            }
        }
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        timerGuiSingleMainPanel = new JPanel();
        timerGuiSingleMainPanel.setLayout(new GridLayoutManager(3, 2, new Insets(0, 0, 0, 0), -1, -1));
        timerGuiSingleMainPanel.setBackground(new Color(-10328710));
        GameGuiLeftPanel = new JPanel();
        GameGuiLeftPanel.setLayout(new GridLayoutManager(6, 2, new Insets(0, 0, 0, 0), -1, -1));
        GameGuiLeftPanel.setBackground(new Color(-10328710));
        timerGuiSingleMainPanel.add(GameGuiLeftPanel, new GridConstraints(0, 0, 3, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        button1 = new JButton();
        button1.setBackground(new Color(-15332589));
        button1.setFont(new Font("Corbel", Font.BOLD, 26));
        button1.setForeground(new Color(-16551924));
        button1.setText("1");
        GameGuiLeftPanel.add(button1, new GridConstraints(2, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        button4 = new JButton();
        button4.setBackground(new Color(-15332589));
        button4.setFont(new Font("Corbel", Font.BOLD, 26));
        button4.setForeground(new Color(-16551924));
        button4.setText("4");
        GameGuiLeftPanel.add(button4, new GridConstraints(5, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        button3 = new JButton();
        button3.setBackground(new Color(-15332589));
        button3.setFont(new Font("Corbel", Font.BOLD, 26));
        button3.setForeground(new Color(-16551924));
        button3.setText("3");
        GameGuiLeftPanel.add(button3, new GridConstraints(4, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        button2 = new JButton();
        button2.setBackground(new Color(-15332589));
        button2.setFont(new Font("Corbel", Font.BOLD, 26));
        button2.setForeground(new Color(-16551924));
        button2.setText("2");
        GameGuiLeftPanel.add(button2, new GridConstraints(3, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        GameGuiLeftLabel = new JLabel();
        GameGuiLeftLabel.setEnabled(true);
        GameGuiLeftLabel.setFont(new Font("Corbel", Font.BOLD, 18));
        GameGuiLeftLabel.setForeground(new Color(-15332589));
        GameGuiLeftLabel.setText(" SCORE :");
        GameGuiLeftPanel.add(GameGuiLeftLabel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        scoreLabel = new JLabel();
        scoreLabel.setFont(new Font("Corbel", Font.BOLD, 28));
        scoreLabel.setForeground(new Color(-3551925));
        scoreLabel.setText("15000");
        GameGuiLeftPanel.add(scoreLabel, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        gameGuiModeLabel = new JLabel();
        gameGuiModeLabel.setFont(new Font("Corbel", Font.BOLD, 18));
        gameGuiModeLabel.setForeground(new Color(-15332589));
        gameGuiModeLabel.setText("Label");
        GameGuiLeftPanel.add(gameGuiModeLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        categoryLabel = new JLabel();
        categoryLabel.setFont(new Font("Corbel", Font.BOLD, 18));
        categoryLabel.setForeground(new Color(-15332589));
        categoryLabel.setText("Label");
        GameGuiLeftPanel.add(categoryLabel, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        ImagePanel = new JPanel();
        ImagePanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        ImagePanel.setBackground(new Color(-10328710));
        timerGuiSingleMainPanel.add(ImagePanel, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        imageLabel = new JLabel();
        imageLabel.setForeground(new Color(-15));
        imageLabel.setText("");
        ImagePanel.add(imageLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        QuestionPanel = new JPanel();
        QuestionPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        QuestionPanel.setBackground(new Color(-10328710));
        QuestionPanel.setEnabled(true);
        timerGuiSingleMainPanel.add(QuestionPanel, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        QuestionAnswersText = new JTextArea();
        QuestionAnswersText.setBackground(new Color(-15332589));
        QuestionAnswersText.setEditable(false);
        QuestionAnswersText.setFont(new Font("Corbel", Font.PLAIN, 22));
        QuestionAnswersText.setForeground(new Color(-16551924));
        QuestionAnswersText.setText("");
        QuestionPanel.add(QuestionAnswersText, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, 50), null, 0, false));
        timerLabel = new JLabel();
        timerLabel.setFont(new Font(timerLabel.getFont().getName(), Font.BOLD, timerLabel.getFont().getSize()));
        timerLabel.setForeground(new Color(-62720));
        timerLabel.setText("Label");
        timerGuiSingleMainPanel.add(timerLabel, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return timerGuiSingleMainPanel;
    }

    class TimerCountdown extends Thread {               //η μεθοδος που εμφανιζει χρονομετρο αντιστροφης μετρησης

        @Override
        public void run() {

            timerCounter = 0;

            while (timerCounter <= 5000) {              //οσο δεν εχει περασει ο μετρητης μας την τιμη 5000 που συμβολιζει 5sec

                timerLabel.setVisible(true);                                    //κανει το label του χρονομετρου να εμφανιζει 5000 μειον τον μετρητη
                timerLabel.setText("" + (5000 - timerCounter) / 1000 + " sec");
                try {
                    sleep(1000);                //αφου περιμενουμε για ενα δευτερολεπτο
                    timerCounter += 1000;           //αυξανουμε την τιμη του μετρητη και αυτο σε συνδυασμο με την παραπανω αφαιρεση δινει την αισθηση της αντιστροφης μετρησης
                } catch (InterruptedException ex) {
                    break;
                }
            }
        }
    }


    private void setTextLabel(String score, String questionAnswerText, ImageIcon icon, String category) {
        scoreLabel.setText(score);
        QuestionAnswersText.setText(questionAnswerText);              //καλειται στον κατασκευαστη αλλα και οποτε θελουμε να εμφανισουμε καινουρια ερωτηση
        imageLabel.setIcon(icon);
        categoryLabel.setText(category);
    }


    private void questionLooper(String choice) {  //η μεθοδος που οπως ειπαμε υπαρχει σε ολα τα modes (βλ.RightAnswerGuiSingle)

        timerCountdown.interrupt();       //με τη διαφορα πως πρεπει να σταματαει την αντιστροφη μετρηση
        currentTime = System.currentTimeMillis(); //να αποθηκευει τον χρονο στον οποιο δοθηκε η απαντηση που ειναι σχεδον ισος με τον τωρινο


        if (answerChecker(choice)) {
            timeElapsed = currentTime - startTime;  //αν ειναι σωστη η απαντηση δινει ποντους με βαση τον κανονα που μας εχει δοθει
            if (timeElapsed < 5000) {
                score += (5000 - timeElapsed) * 0.2;
            }
        }

        if (questionCounter < 5) {                 //Αν εχουμε περασει τις 5 ερωτησει κανει οτι και η αντιστοιχη μεθοδος
            scoreString = String.valueOf(score);     //της RightAnswerGuiSingle
            setTextLabel(scoreString, getRandomQuestionAnswer(), getImageIfExists(), "@" + getQuestionCategory());
            questionCounter++;
        } else {
            timerGuiFrame.dispose();
            questionCounter = 0;
            randomSingleModePicker();

        }

        timerCountdown = new TimerCountdown();  //ξεκιναει καινουρια αντιστροφη μετρηση
        timerCountdown.start();
        startTime = System.currentTimeMillis();  //και κραταει τη τωρινη ωρα ως ωρα εναρξης


    }

    private void setButtonInputActionMaps() {     //συγχρονιζουμε τα κουμπια με τα <1,2,3,4> του πληκτρολογιου
        button1.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke("1"), "pressed");
        button1.getActionMap().put("pressed", button1Action);
        button2.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke("2"), "pressed");
        button2.getActionMap().put("pressed", button2Action);
        button3.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke("3"), "pressed");
        button3.getActionMap().put("pressed", button3Action);
        button4.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke("4"), "pressed");
        button4.getActionMap().put("pressed", button4Action);
    }

    private void setButtonActionListeners() {          //φτιαχνουμε listeners για τα κουμπια μας
        button1.addActionListener(button1Action);
        button2.addActionListener(button2Action);
        button3.addActionListener(button3Action);
        button4.addActionListener(button4Action);
    }


    private Action button1Action = new AbstractAction() {
        @Override
        public void actionPerformed(ActionEvent e) {

            System.out.println("PATHSES TO KOUMPI 1");          //οταν πατιεται ενα κοουμπι καλειται ο questionLooper για την επιλογη μας
            questionLooper("a");

        }
    };
    private Action button2Action = new AbstractAction() {
        @Override
        public void actionPerformed(ActionEvent e) {

            System.out.println("PATHSES TO KOUMPI 2");
            questionLooper("b");
        }
    };
    private Action button3Action = new AbstractAction() {
        @Override
        public void actionPerformed(ActionEvent e) {

            System.out.println("PATHSES TO KOUMPI 3");
            questionLooper("c");
        }
    };
    private Action button4Action = new AbstractAction() {
        @Override
        public void actionPerformed(ActionEvent e) {

            System.out.println("PATHSES TO KOUMPI 4");
            questionLooper("d");
        }
    };


}

